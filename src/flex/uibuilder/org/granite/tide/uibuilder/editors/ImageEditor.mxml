<mx:HBox
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="*">
	
	<mx:Script>
        <![CDATA[
        	import mx.controls.Alert;
        	import mx.utils.Base64Decoder;
        	import org.granite.tide.events.TideResultEvent;
        	import org.granite.tide.Component;
        	import org.granite.tide.BaseContext;
        	import flash.events.Event;
        	import flash.utils.getQualifiedClassName;
        	import flash.net.FileReference;
        	import mx.events.FlexEvent;
        	
        	
			[Bindable]
			public var entity:Object;
			
			[Bindable]
			public var propertyName:String;
			
			[Bindable]
			public var fileRef:FileReference;			
			
            
            private function uploadImage():void {
            	fileRef = new FileReference();
            	fileRef.addEventListener(Event.SELECT, selectImage, false, 0, true);
            	fileRef.browse();
            }
            
            private function selectImage(event:Event):void {
            	var className:String = getQualifiedClassName(entity);
            	var entityName:String = className.substring(className.lastIndexOf("::")+2).toLowerCase();
            	fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteHandler);
            	fileRef.addEventListener(ProgressEvent.PROGRESS, uploadProgressHandler);
            	fileRef.upload(new URLRequest("./" + entityName + "/upload?id=" + entity.id + "&property=" + propertyName), propertyName);
            }          
            
            private function uploadProgressHandler(event:ProgressEvent):void {
            	upload.label = "Upload image (" + (event.bytesLoaded*100.0/event.bytesTotal) + "%)";
            }
            
            private function uploadCompleteHandler(event:DataEvent):void {
            	completeHandler(event.data);
            	upload.label = "Upload image";
            }
                        
            private function deleteImage():void {
            	var className:String = getQualifiedClassName(entity);
            	var entityName:String = className.substring(className.lastIndexOf("::")+2).toLowerCase();
            	var req:URLRequest = new URLRequest("./" + entityName + "/upload?id=" + entity.id + "&property=" + propertyName);
            	var loader:URLLoader = new URLLoader(req);
            	loader.addEventListener(Event.COMPLETE, deleteCompleteHandler);
            }
            
            private function deleteCompleteHandler(event:Event):void {
            	completeHandler(event.target.data);
            }
            
            private function completeHandler(data:String):void {
            	var buf:Base64Decoder = new Base64Decoder();
            	buf.decode(data);
            	var obj:Object = buf.toByteArray().readObject();
            	entity.meta_getEntityManager().meta_mergeExternal(obj, entity);
            	entity.meta_getEntityManager().meta_mergeInGlobalContext();
            	image.source = null;
            	dispatchEvent(new Event("imageChange"));            	
            }
            
            
            [Bindable(event="imageChange")]
            private function getImageSource(entity:Object, propertyName:String):String {
            	if (entity[propertyName] == null)
            		return null;
            	var className:String = getQualifiedClassName(entity);
            	var entityName:String = className.substring(className.lastIndexOf("::")+2).toLowerCase();
            	return "./" + entityName + "/download?id=" + entity.id + "&property=" + propertyName;
            }            
      	]]>
	</mx:Script>
	
	<mx:Image id="image" source="{getImageSource(entity, propertyName)}"/>
	
	<mx:VBox>
		<mx:Button id="upload" label="Upload image" click="uploadImage()"/>
		<mx:Button id="remove" label="Delete image" click="deleteImage()"
			enabled="{getImageSource(entity, propertyName) != null}"/>
	</mx:VBox>
</mx:HBox>
