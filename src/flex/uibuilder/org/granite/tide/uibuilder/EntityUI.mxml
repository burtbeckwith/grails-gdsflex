<?xml version="1.0" encoding="utf-8"?>

<mx:VBox
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="*"
    width="100%"
    creationPolicy="none"
    show="updateURL()"
    creationComplete="buildColumns(); list()">
   
    <mx:Script>
        <![CDATA[
        	import flash.utils.describeType;
        	import flash.utils.getQualifiedClassName;
        	import mx.utils.ObjectUtil;
        	import mx.events.PropertyChangeEvent;
            import mx.binding.utils.BindingUtils;
            import mx.events.ItemClickEvent;
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
        	import mx.controls.dataGridClasses.DataGridColumn;
        	import org.granite.tide.Tide;
        	import org.granite.tide.BaseContext;
            import org.granite.tide.events.TideResultEvent;
            import org.granite.tide.spring.Spring;
            import org.granite.tide.spring.PagedQuery;
        	import org.granite.tide.uibuilder.events.ListEntityEvent;
        	import org.granite.tide.uibuilder.events.ShowEntityEvent;
        	import org.granite.tide.uibuilder.events.EndEditEntityEvent;
            import org.granite.tide.uibuilder.events.EditEntityEvent;
            import org.granite.tide.uibuilder.util.ReflectionUtil;
            
            
            private var _entityClass:Class;
            private var _entitySubclasses:Array;
            [Bindable]
            private var _entityName:String;
            private var _qualifiedEntityName:String;
            
            [Bindable]
            private var _buttons:Array = new Array();
            
            
            private function upperCaseEntityName():String {
            	return _entityName.substring(0, 1).toUpperCase() + _entityName.substring(1);
            }
            
            public function set context(context:BaseContext):void {
            	_context = context;
            }
            
            public function set entityClass(entityClass:Class):void {
            	if (entityClass != _entityClass) {
	            	_entityClass = entityClass;
	            	var className:String = getQualifiedClassName(entityClass);
	            	var entityName:String = className.substring(className.lastIndexOf("::")+2).toLowerCase();
	            	var qualifiedEntityName:String = className.replace("::", ".").toLowerCase();
	            	
	            	Spring.getInstance().addComponent(entityName + 'Instance', _entityClass, true, false);
		            Spring.getInstance().addComponentWithFactory(entityName + "List", PagedQuery, 
	    	            { useGrailsController: true, remoteComponentName: entityName + "Controller", maxResults: 36 }, 
	    	            false, true, Tide.RESTRICT_UNKNOWN, null, false);
	        	    Spring.getInstance().addComponentWithFactory(qualifiedEntityName + ".entityEdit", EntityEdit, 
	        	    	{ entityClass: _entityClass }, true, true, Tide.RESTRICT_UNKNOWN, null, false);
	        	    Spring.getInstance().addComponentWithFactory(qualifiedEntityName + ".entityEditCtl", EntityEditCtl, 
	        	    	{ entityClass: _entityClass }, true, true, Tide.RESTRICT_UNKNOWN, null, false);
	        	    
	        	    _entityName = entityName;
	        	    _qualifiedEntityName = qualifiedEntityName;
	        	    	
    	    		callLater(init);
            	}
            }
            
            private function init():void {
            	if (_context == null)
            		_context = Spring.getInstance().getContext();
    	    	_context[_qualifiedEntityName + ".entityUI"] = this;
	    		_context.urlMapping.addMapping(_entityName, _qualifiedEntityName + ".entityUI");
			}
			
			public function set entitySubclasses(entitySubclasses:Array):void {
				_entitySubclasses = entitySubclasses;
			}
			
			
			[Bindable]
			protected var _columns:Array = null;
			protected var _labels:Object = new Object();
			
			protected function buildColumns():void {
				var metadata:Array = IEntityMetadataBuilder(_context.tideEntityMetadataBuilder).buildMetadata(_entityClass);
				
				for each (var property:Object in metadata)
					_labels[property.name] = property.label;
				
				var builder:IUIBuilder = _context.meta_getInstance(_qualifiedEntityName + '.tideUIBuilder') as IUIBuilder;
				if (builder == null)
					builder = IUIBuilder(_context.tideUIBuilder);
				_columns = builder.buildListColumns(getQualifiedClassName(_entityClass), metadata, elementLabel);
			}
			
			protected function elementLabel(item:Object, column:DataGridColumn):String {
				return item[column.dataField][_labels[column.dataField]];
			}
            

            [Bindable]
            protected var _context:BaseContext;
           	
           	
            [Observer]
            public function refreshList(event:ListEntityEvent = null):void {
                _context[_entityName + 'List'].fullRefresh();
            }
            
            private function initButtonBar():void {
        	    var buttons:Array = new Array();
        	    buttons.push("New " + upperCaseEntityName());
        	    buttons.push("Edit " + upperCaseEntityName());
				for each (var entityClass:Class in _entitySubclasses)
					buttons.splice(_buttons.length-1, 0, "New " + ReflectionUtil.getUpperCaseEntityName(entityClass));
				_buttons = buttons;
            }
            
            private function completeButtonBar():void {
                BindingUtils.bindProperty(bbMain.getChildAt(_buttons.length-1), "enabled", dgList, "selectedItem");
            }
           
            private function clickHandler(event:ItemClickEvent):void {
                if (event.index == 0)
                    dispatchEvent(new EditEntityEvent(_entityClass));
                else if (event.index > 0 && event.index < _buttons.length-1)
                    dispatchEvent(new EditEntityEvent(_entitySubclasses[event.index-1]));
                else if (event.index == _buttons.length-1 && dgList.selectedItem)
                    dispatchEvent(new EditEntityEvent(dgList.selectedItem));
            }
			
            [Observer]
        	public function edit(event:EditEntityEvent):void {
        		dispatchEvent(new Event("showEntityUI", true));
        	}
			
            [Observer]
        	public function endEdit(event:EndEditEntityEvent):void {
        		dispatchEvent(new Event("endEntityUI", true));
        	}
        	
        	
        	private function setURL(url:String):void {
        		_context.urlMapping.updateURL(_entityName + "/" + url);
        	}
			
			private function updateURL():void {
				if (nav.selectedIndex == 0)
					callLater(setURL, [ "list" ]);
				else {
					var entityInstance:Object = Object(nav.selectedChild).entityInstance;
					callLater(setURL, [ entityInstance.id ? "show/" + entityInstance.id : "create" ]);
				}
			}
        	
        	[Path("list")]
        	public function list():void {
        		dispatchEvent(new Event("showEntityUI", true));
        		if (nav != null)
        			nav.selectedIndex = 0;
        	}
        	
        	[Path("create")]
        	public function create():void {
        		dispatchEvent(new Event("showEntityUI", true));
        		_context.application.callLater(doCreate);
        	}
        	
        	private function doCreate():void {
                dispatchEvent(new EditEntityEvent(_entityClass));
        	}
        	
        	[Path("show/{id}")]
        	public function show(id:Number):void {
        		dispatchEvent(new Event("showEntityUI", true));
        		_context.application.callLater(doShow, [id]);
        	}
        	
        	private function doShow(id:Number):void {
                dispatchEvent(new ShowEntityEvent(_entityClass, id));
        	}
        ]]>
    </mx:Script>
   
    <mx:TabNavigator id="nav" width="100%" height="100%" change="updateURL()">
        <mx:VBox label="{upperCaseEntityName() + ' List'}"
        	width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
        	
            <mx:ButtonBar id="bbMain" initialize="initButtonBar()" creationComplete="completeButtonBar()" itemClick="clickHandler(event);"
            	dataProvider="{_buttons}"/>
           
            <mx:DataGrid id="dgList" dataProvider="{_entityName ? _context[_entityName + 'List'] : null}"
            	columns="{_columns}" 
            	width="100%" height="100%">
            </mx:DataGrid>
            
            <mx:Button label="Refresh" click="refreshList()"/>
        </mx:VBox>
    </mx:TabNavigator>
   
</mx:VBox>
